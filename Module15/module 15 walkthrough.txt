module 15 walkthrough
GeoJSON



USGS summary format
ALL EARTHQUAKES FROM LAST 7 DAYS
ALL WEEK GEOJSON
 deature properties for geometry and 

pb2002 

logic.js

#create respective tiles layers
var defaultMap = 1.tileLayer(' WEBSITE', (
	maxZoom: 19,
	attribution: '&copy; <a href=' WEBSITE''
});

//grayscale layer
var grayscale = L.tileLater('WEBSITE', {
	attribution: 'Map-tiles by <a href='WEBSITE',
	subdomains: 'abcd',
	minZoom= 0,
	maxZoom: 20,
	ext: 'png'
});

// water color layer
var waterColor = L.tileLayer(' WEBSITE', {
	attribute: 'Map tiles be <a href' WEBSITE',
	subdomain: 'abcd',
	minZoom= 1,
	maxZoom= 16,
	ext= 'jpg'
}); 

// topography
let topoMap = L.tileLayer('HTML', {
	maxZoom: 17,
	attribution: 'Map data: &copy;, <a href='HTML'
});




//make a basemaps object
let basemaps= {
	GrayScale: grayscale,
	"Water Color": waterColor,
	"Topography": topoMap,
	Default: defaultMap,
};

****//make a map object
****var myMap = L.map("map", {
****	center: [ LAT AND LONG ],
****	zoom: 3,
****	layers: [defaultMap, grayscale, waterColor, topoMap]
****});


// add the default map to the map

defaultMap.addTo{myMAp};

// add layer control
L.control
	.layers(baseMaps)
	.addTo(myMap);


// get the data for the tectonic plates and draw them on map
// variable to holf the tectonic plates layer
let tectonicplates = new L.layerGroup():

//populate those plates by calling api to get info for the plates
 d3.json("HTML")
.than(function(plateData){
	//console log to see if data loads
	console.log(plateData)

***RUN THEN // in front of console.log

	// load the data using geojson and add to the techtonic plates later
	L.geoJson(plateData,{
//style this data to see the lines
	color: "green",
	weight: 1 
}).addTo(techtonicplates);

// add the techtonic plates to the Map
techtonicplates.addTo{myMap];

// variable to hold the earthquake layer of data
let earthquakes = new L.layerGroup():

//get the data for the earthquakes and populate the latergroup
d3.json("HTML")
.then(
	function(earthquakeData){
		console log to see if data loads
		console.log(plateData)
		***RUN THEN // in front of console.log
		//make a function that chooses the color of the data point
		function dataColor(depth){
		if (depth > 90),
			return "red";
		else if(depth > 70),
			return "#fc4903";
		else if(depth > 50),
			return "#fc8403";
		else if(depth > 30),
			return "#fcad03";
		else if(depth > 10),
			return "green"
	}

	// make a function that determines the size of the radius
	function radiusSize(mag){
		if (mag == 0)
			return 1;  
		else
			return mag *5; // make sure that the circle is pronounced in the map
}  

// add on to the style for each data point
function dataStyle(feature)
{
	return {
		opacity: 1,
		fillOpacity: 1,
		fillColor: dataColor(feature.grometry.coordinates[2]), //index 2 for depth
		color: "000000", //black outline
		radius: radiusSize(feature.properties.mag), //grabs magnitude
		weight: 0.5
		}
	}

	//add the GeoJson data to the earthquake layer
	L.geoJson(earthquakeData, {
		//make each feature a marker on the map, and is a circle
		pointToLayer: function(feature, latLng) {
			return L.circleMarker(latLng);
		},
		style: dataStyle, //calling the data style function and add the earthquake data
		onEachFeaturre: function(feature, layer){
			layer.bindPopup("Magnitude: <b>S(feature.properties.mag)</b><br>
				Depth: <b>S(feature.geometry.coordinates[2]}</b><br>)
				Location: <b>S(feature.properties.place)</b>");
		}
	}.addTo(earthquakes);
	}
};


earthquakes.addTo(myMap);
	//add the overlay for the techtonic plates
let overlays = {
	"Techtonic Plates": techtonicplates
	"Earthquake Data": earthquakes
};

//add the overlay	
L.control
	.layers(baseMaps)
	.addTo(myMap);


let legend = L.control({
		position: "bottomleft"
});

//add the porperties for the legend
legend.onAdd = function() {
		//div for the legend to appear on the page
		let div= L.DomUtil.create("div", "info legend");


		// set up the intervals
		let intervals = [-10, 10, 30, 50 70, 90];
		//set the colors of intervals
		let colors = [
			"green",
			"#fc4903",
			"#fc8403",
			"#fcad03",
			"#cafc03",
			"red"
		];
		//loop through the intervals and the colors to generate a label
		//with a colored square for each interval
		for(var i=0; i < intervals.length; i++)
		{
			//inner html that sets the square for each interval and label
			div.innerHTML += "<i style: background: "
				+ colors[i]
				+ "'></i>"
				+ grades[1]
				+ (grades[i+1] ? "km &ndasd km;" + grades[i+1] + "km<br>" : "+");
			}
			return div;
};


//add legend to map
legend.addTo(myMap);

COMPLETED
	






